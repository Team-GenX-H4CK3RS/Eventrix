// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Tag {
    name String @id
    users UserTag[]
    events EventTag[]
}

model UserTag {
    user    User   @relation(fields: [userId],references: [id], onDelete: Cascade)
    userId  String
    tag     Tag   @relation(fields: [tagName],references: [name], onDelete: Cascade)
    tagName String

    @@id([userId, tagName])
}

model EventTag {
    event   Event  @relation(fields: [eventId],references: [id], onDelete: Cascade)
    eventId Int
    tag     Tag    @relation(fields: [tagName],references: [name], onDelete: Cascade)
    tagName String

    @@id([eventId, tagName])
}

model Organisation {
    id      Int                @id @default(autoincrement())
    name    String
    members OrganisationUser[]
    roles   OrganisationRole[]
    events  Event[]
}

model Event {
    id           Int          @id @default(autoincrement())
    title        String
    description  String
    location     String
    enrollEndsOn DateTime
    createdOn    DateTime     @default(now())
    beginsOn     DateTime
    endsOn       DateTime
    org          Organisation @relation(fields: [orgId],references: [id], onDelete: Cascade)
    orgId        Int
    eventTags    EventTag[]
}

model OrganisationUser {
    org      Organisation      @relation(fields: [orgId],references: [id], onDelete: Cascade)
    orgId    Int
    user     User              @relation(fields: [userId],references: [id], onDelete: Cascade)
    userId   String
    role     OrganisationRole? @relation(fields: [roleId],references: [id])
    roleId   Int

    @@id([orgId, userId, roleId])
}

model OrganisationRole {
    id         Int                @id @default(autoincrement())
    name       String
    hasCreated Boolean
    hasAdmin   Boolean
    hasJoined  Boolean            @default(false)
    users      OrganisationUser[]
    org        Organisation       @relation(fields: [orgId],references: [id])
    orgId      Int
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    userTags      UserTag[]
    accounts      Account[]
    sessions      Session[]
    affilitedOrgs OrganisationUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
